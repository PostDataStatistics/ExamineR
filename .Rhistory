questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = F
}
## QUESTION/ANSWER GENERATION
(selection = sample(1:2, 3, replace = T))
(solution = paste0(answersAbs[selection[1]]))
(solution = paste0(answersAbs[selection[1]], answersRel[selection[2]], answersCumul[selection[3]]))
(solution = paste0(
as.numeric(answersAbs[selection[1]]),
as.numeric(answersRel[selection[2]]),
as.numeric(answersCumul[selection[3]])))
as.numeric(answersAbs[selection[1]])
answersAbs[selection[1]]
answersRel[1] = F
answersRel[1]
class(answersAbs[1])
questionsAbs = character()
answersAbs = character()
questionsRel = character()
answersRel = character()
questionsCumul = character()
answersCumul = character()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = TRUE
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = FALSE
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = FALSE
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = TRUE
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = FALSE
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = FALSE
}
(selection = sample(1:2, 3, replace = T))
(solution = paste0(
as.numeric(answersAbs[selection[1]]),
as.numeric(answersRel[selection[2]]),
as.numeric(answersCumul[selection[3]])))
answersAbs[selection[1]]
(solution = paste0(
as.logical(answersAbs[selection[1]]),
as.logical(answersRel[selection[2]]),
as.logical(answersCumul[selection[3]])))
questionsAbs = character()
answersAbs = logical()
questionsRel = character()
answersRel = logical()
questionsCumul = character()
answersCumul = logical()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = TRUE
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = FALSE
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = FALSE
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = TRUE
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = FALSE
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = FALSE
}
## QUESTION/ANSWER GENERATION
(selection = sample(1:2, 3, replace = T))
(solution = paste0(
as.logical(answersAbs[selection[1]]),
as.logical(answersRel[selection[2]]),
as.logical(answersCumul[selection[3]])))
questionsAbs = character()
answersAbs = logical()
questionsRel = character()
answersRel = logical()
questionsCumul = character()
answersCumul = logical()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = TRUE
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = FALSE
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = FALSE
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = TRUE
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = FALSE
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = FALSE
}
(selection = sample(1:2, 3, replace = T))
class(answersAbs[1])
as.integer(answersAbs[1])
(solution = paste0(
as.integer(answersAbs[selection[1]]),
as.integer(answersRel[selection[2]]),
as.integer(answersCumul[selection[3]])))
`r cat(solution)`
cat(solution)
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
cat(paste0(collapse = "", "exsolution: " solution, ), fill = 1)
cat(paste0("exsolution: ", solution, collapse = ""), fill = 1)
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("010002.Rmd", "010002.Rmd", "010002.Rmd", "050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
data
n = sample(12:15, 1)
data = c(sample(1:10, n, replace=TRUE))
(data = c(sample(1:10, n, replace=TRUE)))
n = sample(15:20, 1)
(data = c(sample(1:10, n, replace=TRUE)))
n = sample(15:20, 1)
(data = c(sample(1:10, n, replace=TRUE)))
n = sample(15:20, 1)
(data = c(sample(1:10, n, replace=TRUE)))
(chooseValue = sample(data, 1))
(sol = median(data))
(sol = signif(sol, signifDig))
setwd("~/Dropbox/ExamineR/repo/ExamineR/newVersion")
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"01010201.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"01010201.Rmd", "01010202.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
xbar = mean(data)
(sol = sum((data - xbar)^2)) / n
(n - 1) * var(data) / n
(sol = (n - 1) * var(data) / n)
## DATA GENERATION
signifDig <- 4
n = sample(100:500, 1)
data = c(sample(1:30, n, replace=TRUE))
(dataDF = data.frame(x=data))
(fileName = paste0("data", paste0(sample(c(LETTERS, 0:9), 10), collapse = ""), ".csv", collapse = ""))
write.table(dataDF, file = fileName, sep = " ", row.names = FALSE)
## QUESTION/ANSWER GENERATION
(sol = (n - 1) * var(data) / n)
(sol = signif(sol, signifDig))
## DATA GENERATION
signifDig <- 4
n = sample(100:500, 1)
data = c(sample(1:30, n, replace=TRUE))
(dataDF = data.frame(x=data))
(fileName = paste0("data", paste0(sample(c(LETTERS, 0:9), 10), collapse = ""), ".csv", collapse = ""))
write.table(dataDF, file = fileName, sep = " ", row.names = FALSE)
## QUESTION/ANSWER GENERATION
(sol = (n - 1) * var(data) / n)
(sol = signif(sol, signifDig))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
data
(frequencies = as.vector(table(data)))
(orderedUniqueValues = sort(unique(data)))
signifDig <- 4
n = sample(15:20, 1)
n
data = c(sample(1:10, n, replace=TRUE))
data
(frequencies = as.vector(table(data)))
(orderedUniqueValues = sort(unique(data)))
k = sample(8:10, 1)
(k = sample(8:10, 1))
values = c(sample(-10:10, n, replace=TRUE))
(values = c(sample(-10:10, n, replace=TRUE)))
(values = c(sample(-10:10, n)))
(k = sample(8:10, 1))
(k = sample(8:10, 1))
(values = c(sample(-10:10, k)))
(k = sample(8:10, 1))
(values = c(sample(-10:20, k)))
(k = sample(8:10, 1))
(values = c(sample(-10:20, k)))
(frequencies = c(sample(1:20, k)))
(frequencies = c(sample(1:15, k)))
(data = rep(values, frequencies))
(frecTableForQuestion = table(data))
n = length(data)
(sol = (n - 1) * var(data) / n)
paste0(frecTableForQuestion, collapse = ", ")
paste0(names(frecTableForQuestion), collapse = ", ")
question=paste0("Given the set of unique values $$", paste0(names(frecTableForQuestion), collapse = ", "),"$$ and their absolute frequencies  $$", paste0(frecTableForQuestion, collapse = ", "),"$$ find the **arithmetic mean** of this data set.")
question
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"01010201.Rmd", "01010202.Rmd",
"01020101.Rmd", "01020102.Rmd",
"01020103.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
frecs = c(−10,−9,−2,4,7,12,15,18)
frecs = c(-10,-9,-2,4,7,12,15,18)
values = c(-10,-9,-2,4,7,12,15,18)
frecs = c(13,6,15,14,4,7,1,2)
data = rep(values, frecs)
n = length(data)
(n-1) *var(data)/n
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T)
View(data)
n = length(data)
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T)[,1]
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T)
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T)[,1]
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T)
data
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T, row.names = F)
data = read.table("~/Downloads/tmpBorrar/dataVGYMXIFP19.csv", header = T)
View(data)
datos = data[,1]
datos
n = length(datos)
(n-1) *var(datos)/n
datos = c(1,10,6,3,8,10,10,8,5,1,9,10,7,4,4,6,10,1,8)
n = length(datos)
(n-1) *var(datos)/n
