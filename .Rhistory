template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:30, n, replace=TRUE))
(frequencies = as.vector(table(data)))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:15, n, replace=TRUE))
(frequencies = as.vector(table(data)))
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(frequencies = as.vector(table(data)))
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(frequencies = as.vector(table(data)))
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(frequencies = as.vector(table(data)))
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(frequencies = as.vector(table(data)))
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(frequencies = as.vector(table(data)))
(orderedUniqueValues = sort(unique(data)))
frecTableForQuestion = cbind(orderedUniqueValues, frequencies)
(chooseValue = sample(data, 1))
(sol = unname(frecTableForQuestion[orderedUniqueValues == chooseValue, ][2]))
frecTableForQuestion
(sol = signif(sol, 4))
paste0(data, collapse = ", ")
question=paste0("Given the set of values $$", paste0(data, collapse = ", "),"$$ construct their **absolute frequency** table, and find the **absolute frequency** of the value ", chooseValue, ".")
question
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("010001.Rmd", "010002.Rmd",
"010102.Rmd",
"010202.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("010001.Rmd", "010002.Rmd",
"010102.Rmd",
"010202.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
(relFrequencies = format(as.vector(table(data) / n), 4))
(relFrequencies = as.vector(table(data) / n))
(relFrequencies = table(data) / n)
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(relFrequencies = table(data) / n)
(relFrequencies = format(table(data) / n, 4))
(relFrequencies = signif(table(data) / n, 4))
(orderedUniqueValues = sort(unique(data)))
frecTableForQuestion = cbind(orderedUniqueValues, relFrequencies)
frecTableForQuestion
(relFrequencies = unname(signif(table(data) / n, 4)))
(orderedUniqueValues = sort(unique(data)))
frecTableForQuestion = cbind(orderedUniqueValues, relFrequencies)
frecTableForQuestion
(chooseValue = sample(data, 1))
(sol = unname(frecTableForQuestion[orderedUniqueValues == chooseValue, ][2]))
(sol = signif(sol, 4))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(cumFrequencies = cumsum(table(data)))
(orderedUniqueValues = sort(unique(data)))
frecTableForQuestion = cbind(orderedUniqueValues, cumFrequencies)
frecTableForQuestion
(chooseValue = sample(data, 1))
(sol = unname(frecTableForQuestion[orderedUniqueValues == chooseValue, ][2]))
(sol = signif(sol, signifDig))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("010001.Rmd", "010002.Rmd",
"010101.Rmd", "010102.Rmd",
"010201.Rmd", "010202.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
library(shiny); runApp('~/Dropbox/ExamineR/repo/ExamineR/exclude/knitrTest/shiny/app2.R')
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(sol = mean(data))
(sol = signif(sol, signifDig))
setwd("~/Dropbox/ExamineR/repo/ExamineR/newVersion")
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010201.Rmd", "01010202.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
exams_skeleton(markup = "markdown", encoding = "UTF-8",
writer = c("exams2html", "exams2pdf", "exams2moodle"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
signifDig <- 4
n = sample(15:20, 1)
data = c(sample(1:10, n, replace=TRUE))
(frequencies = as.vector(table(data)))
(orderedUniqueValues = sort(unique(data)))
frecTableForQuestion = cbind(orderedUniqueValues, frequencies)
(frecTableForQuestion = cbind(orderedUniqueValues, frequencies))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
valores = c(1,3,4,5,6,7,8,9)
frecs = c(4,1,3,2,1,1,2,1)
sum(valores * frecs) / sum(frecs)
setwd("~/Dropbox/ExamineR/repo/ExamineR/exclude/2018")
exams_skeleton(markup = "markdown", encoding = "UTF-8",
writer = c("exams2html", "exams2pdf", "exams2moodle"))
## exams ----------------------------------------------------------------------------
## load package
library("exams")
## this script gives an overview of the example exercises provided
## and basic usage of exams2html/exams2pdf - for more advanced usage
## and further interfaces, see the other demo-*.R scripts
## to get an overview of the available exercises in this demo,
## switch to the "exercises" folder
setwd("exercises")
dir()
## in the following the exercises in R/Markdown (.Rmd) format are discussed
## inspect individual exercises -----------------------------------------------------
## simply turn a single exercise into a HTML file (shown in browser)
exams2html("tstat.Rmd")
## or a PDF file (shown in PDF viewer)
exams2pdf("tstat.Rmd")
## extract the meta-information to check whether it is processed correctly
exams_metainfo(exams2html("tstat.Rmd"))
## types of exercises ---------------------------------------------------------------
## numeric exercises
exams2html(c(
"tstat.Rmd",      ## computation of t-statistic
"dist.Rmd",       ## computation of Euclidean distance
"regression.Rmd", ## prediction in simple linear regression
"lagrange.Rmd"    ## optimization under constraint
))
## single choice exercises
exams2html(c(
"tstat2.Rmd", ## single-choice list of numeric tstat exercise (by hand)
"dist3.Rmd"   ## single-choice list of numeric dist exercise (via num_to_schoice)
))
## multiple choice exercises
exams2html(c(
"anova.Rmd",       ## interpret ANOVA results
"boxplots.Rmd",    ## interpret parallel boxplots
"scatterplot.Rmd", ## interpret scatterplot
"ttest.Rmd",       ## 2-sample t-test
"relfreq.Rmd",     ## table of relative frequencies
"cholesky.Rmd"     ## Cholesky factorization
))
## string exercises
exams2html(c(
"function.Rmd", ## names of R functions
"countrycodes.Rmd"   ## three-letter ISO country codes
))
## cloze exercises (combining several num/schoice/mchoice/string parts)
exams2html(c(
"boxhist.Rmd",  ## download and describe artificial data (schoice/num)
"confint2.Rmd", ## compute a confidence interval (num)
"dist2.Rmd",    ## compute several types of distances (num)
"fourfold.Rmd"  ## compute all elements of a fourfold table (num)
))
## encoding -------------------------------------------------------------------------
exams2html("currency8.Rmd",
encoding = "UTF-8",
template = "../templates/plain.html")
exams2pdf("currency8.Rmd",
encoding = "UTF-8",
template = "../templates/plain.tex")
## other interfaces -----------------------------------------------------------------
## switch back to the original folder
setwd("..")
## other interfaces include:
## - exams2pdf for customizable PDF output
## - exams2nops for a fixed PDF format that can be automatically scanned and evaluated
##
## - exams2html for customizable HTML output
## - exams2moodle for Moodle XML that can be imported into Moodle quizzes
## - exams2qti12/exams2qti21 for QTI XML (version 1.2 or 2.1) that can be imported
##   into various learning management systems (e.g., OLAT or OpenOLAT among others)
##
## - exams2arsnova for a JSON format that can be imported into ARSnova live quizzes
## see the demo-*.R scripts in this directory for more examples
dir()
## ----------------------------------------------------------------------------------
