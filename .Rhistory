of data values in the set."
answerCumul[1] = F
questionCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answerCumul[2] = F
}
questionsAbs = character()
answersAbs = character()
questionsRel = character()
answersRel = character()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = T
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = F
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = F
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = T
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = F
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = F
questionsAbs = character()
answersAbs = character()
questionsRel = character()
answersRel = character()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = T
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = F
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = F
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = T
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = F
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = F
}
questionsAbs = character()
answersAbs = character()
questionsRel = character()
answersRel = character()
questionsCumul = character()
answersCumul = character()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = T
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = F
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = F
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = T
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = F
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = F
}
## QUESTION/ANSWER GENERATION
(selection = sample(1:2, 3, replace = T))
question=paste0("Select all true statements.")
cat(paste(question,collapse=""))
cat(paste("* ", questionsAbs[selection[1]], collapse=""))
cat(paste("* ", questionsAbs[selection[1]], collapse=""))
cat(paste("* ", questionsRel[selection[2]], collapse=""))
cat(paste("* ", questionsCumul[selection[3]], collapse=""))
cat(paste("* ", questionsAbs[selection[1]], collapse=""), fill = 1)
cat(paste("* ", questionsRel[selection[2]], collapse=""), fill = 1)
cat(paste("* ", questionsCumul[selection[3]], collapse=""), fill = 1)
cat(paste("* ", answersAbs[selection[1]], collapse=""), fill = 1)
cat(paste("* ", answersRel[selection[2]], collapse=""), fill = 1)
cat(paste("* ", answersCumul[selection[3]], collapse=""), fill = 1)
cat(paste("* ", answersAbs[selection[1]], collapse=""), fill = 1)
cat(paste("* ", answersRel[selection[2]], collapse=""), fill = 1)
cat(paste("* ", answersCumul[selection[3]], collapse=""), fill = 1)
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
setwd("~/")
setwd("~/Dropbox/ExamineR/repo/ExamineR/newVersion")
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
answersAbs[selection[1]]
questionsAbs = character()
answersAbs = character()
questionsRel = character()
answersRel = character()
questionsCumul = character()
answersCumul = character()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = T
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = F
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = F
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = T
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = F
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = F
}
## QUESTION/ANSWER GENERATION
(selection = sample(1:2, 3, replace = T))
(solution = paste0(answersAbs[selection[1]]))
(solution = paste0(answersAbs[selection[1]], answersRel[selection[2]], answersCumul[selection[3]]))
(solution = paste0(
as.numeric(answersAbs[selection[1]]),
as.numeric(answersRel[selection[2]]),
as.numeric(answersCumul[selection[3]])))
as.numeric(answersAbs[selection[1]])
answersAbs[selection[1]]
answersRel[1] = F
answersRel[1]
class(answersAbs[1])
questionsAbs = character()
answersAbs = character()
questionsRel = character()
answersRel = character()
questionsCumul = character()
answersCumul = character()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = TRUE
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = FALSE
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = FALSE
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = TRUE
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = FALSE
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = FALSE
}
(selection = sample(1:2, 3, replace = T))
(solution = paste0(
as.numeric(answersAbs[selection[1]]),
as.numeric(answersRel[selection[2]]),
as.numeric(answersCumul[selection[3]])))
answersAbs[selection[1]]
(solution = paste0(
as.logical(answersAbs[selection[1]]),
as.logical(answersRel[selection[2]]),
as.logical(answersCumul[selection[3]])))
questionsAbs = character()
answersAbs = logical()
questionsRel = character()
answersRel = logical()
questionsCumul = character()
answersCumul = logical()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = TRUE
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = FALSE
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = FALSE
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = TRUE
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = FALSE
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = FALSE
}
## QUESTION/ANSWER GENERATION
(selection = sample(1:2, 3, replace = T))
(solution = paste0(
as.logical(answersAbs[selection[1]]),
as.logical(answersRel[selection[2]]),
as.logical(answersCumul[selection[3]])))
questionsAbs = character()
answersAbs = logical()
questionsRel = character()
answersRel = logical()
questionsCumul = character()
answersCumul = logical()
if(language == "en"){
questionsAbs[1] = "The sum of all the absolute frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersAbs[1] = TRUE
questionsAbs[2] = "The sum of all the absolute frequencies of a data set is always equal to $1$."
answersAbs[2] = FALSE
questionsRel[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersRel[1] = FALSE
questionsRel[2] = "The sum of all the relative frequencies of a data set is always equal to $1$."
answersRel[2] = TRUE
questionsCumul[1] = "The sum of all the relative frequencies of a data set is always equal to $n$, the number
of data values in the set."
answersCumul[1] = FALSE
questionsCumul[2] = "The sum of all the cumulative frequencies of a data set is always equal to $1$."
answersCumul[2] = FALSE
}
(selection = sample(1:2, 3, replace = T))
class(answersAbs[1])
as.integer(answersAbs[1])
(solution = paste0(
as.integer(answersAbs[selection[1]]),
as.integer(answersRel[selection[2]]),
as.integer(answersCumul[selection[3]])))
`r cat(solution)`
cat(solution)
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
cat(paste0(collapse = "", "exsolution: " solution, ), fill = 1)
cat(paste0("exsolution: ", solution, collapse = ""), fill = 1)
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="en"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("010002.Rmd", "010002.Rmd", "010002.Rmd", "050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
rm(list=ls())
library("exams")
# exams_skeleton(markup = "markdown", encoding = "UTF-8",
#                writer = c("exams2html", "exams2pdf", "exams2moodle"))
language="es"
seedValue = 2018
exercises = c("01000001.Rmd", "01000002.Rmd",
"01000101.Rmd", "01000102.Rmd",
"01000201.Rmd", "01000202.Rmd",
"01000301.Rmd",
"01010001.Rmd", "01010002.Rmd",
"01010101.Rmd",
"050101.Rmd",  "050201.Rmd", "050301.Rmd")
source("attachFile.R")
set.seed(seedValue)
if(language == "en"){
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain.tex", "solution.tex"))
} else if(language == "es")  {
exams2pdf(file = exercises,
solution=TRUE,
template = c("plain_es.tex", "solution_es.tex"))
}
set.seed(seedValue)
exams2html(file = exercises, mathjax = TRUE, solution = TRUE, dir = ".",
template = c("plain_es.html"))
